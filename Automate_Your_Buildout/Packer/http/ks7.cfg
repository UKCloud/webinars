# CentOS 7.x kickstart file - ks7.cfg
#
# For more information on kickstart syntax and commands, refer to the
# CentOS Installation Guide:
# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/sect-kickstart-syntax.html
#
# For testing, you can fire up a local http server temporarily.
# cd to the directory where this ks.cfg file resides and run the following:
#    $ python -m SimpleHTTPServer
# You don't have to restart the server every time you make changes.  Python
# will reload the file from disk every time.  As long as you save your changes
# they will be reflected in the next HTTP download.  Then to test with
# a PXE boot server, enter the following on the PXE boot prompt:
#    > linux text ks=http://<your_ip>:8000/ks.cfg

# Required settings
lang en_US.UTF-8
keyboard uk
rootpw --lock Super$3cRet
authconfig --enableshadow --enablemd5
timezone UTC

# Optional settings
install
cdrom
user --name=packer --plaintext --password P@ck3rIn$t@ll
unsupported_hardware
network --bootproto=dhcp
firewall --disabled
selinux --enforcing
bootloader --location=mbr
text
skipx
zerombr
clearpart --all --initlabel
autopart --fstype=ext4 --nolvm
#part swap --asprimary --fstype="swap" --size=1024
#part /boot --fstype ext4 --size=200
#part / --fstype ext4 --size=1 --grow

firstboot --disabled
reboot

%packages --nobase --ignoremissing --excludedocs
# vagrant needs this to copy initial files via scp
openssh-clients
# Prerequisites for installing VMware Tools or VirtualBox guest additions.
# Put in kickstart to ensure first version installed is from install disk,
# not latest from a mirror.
kernel-headers
kernel-devel
gcc
make
perl
curl
wget
bzip2
dkms
patch
net-tools
git
# Other stuff
sudo
nfs-utils
-fprintd-pam
-intltool

# unnecessary firmware
-aic94xx-firmware
-atmel-firmware
-b43-openfwwf
-bfa-firmware
-ipw*-firmware
-irqbalance
-ivtv-firmware
-iwl*-firmware
-libertas-usb8388-firmware
-ql*-firmware
-rt61pci-firmware
-rt73usb-firmware
-xorg-x11-drv-ati-firmware
-zd1211-firmware
%end

%post
# configure packer user in sudoers
echo "Defaults:packer !requiretty" >> /etc/sudoers.d/packer
echo "%packer ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/packer
chmod 0440 /etc/sudoers.d/packer
cp /etc/sudoers /etc/sudoers.orig
sed -i "s/^\(.*requiretty\)$/#\1/" /etc/sudoers
# keep proxy settings through sudo
echo 'Defaults env_keep += "HTTP_PROXY HTTPS_PROXY FTP_PROXY RSYNC_PROXY NO_PROXY"' >> /etc/sudoers

mkdir ~packer/.ssh
echo "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAqCNF+BWlCBQ8/KRSZMNrJSO4pnGTlyO1zLGi5p3TGSYoG2vwLo2Q3p6nj9m0rEb6TOYpnanYxRtOtP4NR7JZWGoecpmWmG3HMZ6XZdQ253BuYecokllAhSpmXOiiEl7lm4EhPT9z04cDZ1gTSNeusYz0y1Za8gdeW//fKazCxpB97GH1xzpdBRBZaYt2Z7NgIG29RWsq4xfN0DvSBOMroCAe8CZhQgr/3+i8DogU3KKztZ9arIK21egHgRUufH6NjQ6ipxilvR8NKyJ99SYFvAyTwcv5r9pnT+oDJbe57aURAVblog3121W+LYX36c2b/0VMsxhtd3hizr8cUwEkIw== packer" > ~packer/.ssh/authorized_keys
chown -R packer.packer ~packer/.ssh
chmod -R go-rwx ~packer/.ssh
restorecon -Rv ~packer/.ssh

# Randomize root password
dd if=/dev/urandom count=50|md5sum|passwd --stdin root
%end
