heat_template_version: 2015-10-15

description: >
   This HEAT template creates an autoscaled web application deployment.

parameters:
  key_name:
    type: string
    description: SSH Key Pair
    constraints:
      - custom_constraint: nova.keypair
  flavor:
    type: string
    description: Flavor to use for the haproxy server
    default: t1.small
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the haproxy server
    default: "CentOS 7"
    constraints:
      - custom_constraint: glance.image
  app_network:
    type: string
    description: Data network to create DB instances on
    default: app_net
  app_security_group:
    type: string
    description: Security Group to apply to DB instances
    default: app_int_secgroup
  ssh_security_group:
    type: string
    description: Security Group to allow SSH access to instances
    default: ssh_int_secgroup
  db_host:
    type: string
    description: Hostname for database server
  db_name:
    type: string
    description: Database name
    default: counter
  db_user:
    type: string
    description: Database userid
    default: counter
  db_password:
    type: string
    description: Database password
    hidden: true
    default: counterpassword

resources:
  app_cluster:
    type: OS::Nova::ServerGroup
    properties:
      name: Application Cluster
      policies: ['anti-affinity']

  app_asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource:
        type: resources/web_server.yaml
        properties:
            key_name: { get_param: key_name }
            image: { get_param: image }
            flavor: { get_param: flavor }
            app_network: { get_param: app_network }
            app_security_group: { get_param: app_security_group }
            ssh_security_group: { get_param: ssh_security_group }
            db_host: { get_param: db_host }
            db_name: { get_param: db_name }
            db_user: { get_param: db_user }
            db_password: { get_param: db_password }
            app_cluster: { get_resource: app_cluster }
      min_size: 1
      desired_capacity: 3
      max_size: 10

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: app_asg}
      cooldown: 60
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: app_asg}
      cooldown: 60
      scaling_adjustment: '-1'


outputs:
  scale_up_url:
    description: >
      This URL is the webhook to scale up the group.  You can invoke
      the scale-up operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_up_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the group.  You can invoke
      the scale-down operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_down_policy, alarm_url]}
  asg_size:
    description: >
      This is the current size of the auto scaling group.
    value: {get_attr: [app_asg, current_size]}
  server_list:
    description: >
      This is a list of server names that are part of the group.
    value: {get_attr: [app_asg, outputs_list, name]}
  networks:
    description: >
      This is a map of server resources and their networks.
    value: {get_attr: [app_asg, outputs, networks]}
  server_ips:
    description: >
      This is a list of first ip addresses of the servers in the group
      for a specified network.
    value: {get_attr: [app_asg, outputs_list, networks, {get_param: app_network}, 0]}
